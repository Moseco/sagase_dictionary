// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/src/runtime/query_builder/query_builder.dart' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    vocabWritings,
    iXVocabWritingsWritingSearchForm,
    vocabReadings,
    iXVocabReadingsReadingSearchForm,
    iXVocabReadingsReadingRomajiSimplified,
    vocabs,
    vocabDefinitions,
    vocabDefinitionWords,
    iXVocabWritingsVocabId,
    iXVocabWritingsWriting,
    iXVocabReadingsVocabId,
    iXVocabReadingsReading,
    iXVocabReadingsReadingRomaji,
    iXVocabDefinitionsVocabId,
    iXVocabDefinitionWordsWord,
    kanjis,
    kanjiReadings,
    kanjiMeaningWords,
    iXKanjisRadical,
    iXKanjiReadingsKanjiId,
    iXKanjiReadingsReading,
    iXKanjiReadingsReadingRomaji,
    iXKanjiMeaningWordsWord,
    vocabNotes,
    textAnalysisHistoryItems,
    spacedRepetitionDatas,
    searchHistoryItems,
    radicals,
    uKRadicalsRadical,
    properNouns,
    properNounRomajiWords,
    iXProperNounsReading,
    iXProperNounsReadingRomaji,
    iXProperNounRomajiWordsWord,
    predefinedDictionaryLists,
    myDictionaryLists,
    myDictionaryListItems,
    iXMyDictionaryListItemsListId,
    kanjiNotes,
    flashcardSets,
    flashcardSetReports,
    uXFlashcardSetReportsFlashcardSetIdAndDate,
    dictionaryInfos,
    iXSpacedRepetitionDatasVocabId,
    iXSpacedRepetitionDatasKanjiId,
    iXProperNounsWriting,
    iXProperNounsWritingSearchForm,
    iXProperNounsReadingSearchForm,
    iXProperNounsReadingRomajiSimplified,
    iXProperNounsRomaji,
    iXMyDictionaryListItemsVocabId,
    iXMyDictionaryListItemsKanjiId,
    iXKanjiReadingsReadingSearchForm,
    iXKanjiReadingsReadingRomajiSimplified,
  ];
  late final Shape0 vocabWritings = Shape0(
      source: i0.VersionedTable(
        entityName: 'vocab_writings',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXVocabWritingsWritingSearchForm = i1.Index(
      'IX_vocab_writings_writing_search_form',
      'CREATE INDEX IX_vocab_writings_writing_search_form ON vocab_writings (writing_search_form) WHERE writing_search_form IS NOT NULL');
  late final Shape1 vocabReadings = Shape1(
      source: i0.VersionedTable(
        entityName: 'vocab_readings',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_4,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXVocabReadingsReadingSearchForm = i1.Index(
      'IX_vocab_readings_reading_search_form',
      'CREATE INDEX IX_vocab_readings_reading_search_form ON vocab_readings (reading_search_form) WHERE reading_search_form IS NOT NULL');
  final i1.Index iXVocabReadingsReadingRomajiSimplified = i1.Index(
      'IX_vocab_readings_reading_romaji_simplified',
      'CREATE INDEX IX_vocab_readings_reading_romaji_simplified ON vocab_readings (reading_romaji_simplified) WHERE reading_romaji_simplified IS NOT NULL');
  late final Shape2 vocabs = Shape2(
      source: i0.VersionedTable(
        entityName: 'vocabs',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_11,
          _column_12,
          _column_13,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 vocabDefinitions = Shape3(
      source: i0.VersionedTable(
        entityName: 'vocab_definitions',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_14,
          _column_15,
          _column_11,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 vocabDefinitionWords = Shape4(
      source: i0.VersionedTable(
        entityName: 'vocab_definition_words',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_25,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXVocabWritingsVocabId = i1.Index('IX_vocab_writings_vocab_id',
      'CREATE INDEX IX_vocab_writings_vocab_id ON vocab_writings (vocab_id)');
  final i1.Index iXVocabWritingsWriting = i1.Index('IX_vocab_writings_writing',
      'CREATE INDEX IX_vocab_writings_writing ON vocab_writings (writing)');
  final i1.Index iXVocabReadingsVocabId = i1.Index('IX_vocab_readings_vocab_id',
      'CREATE INDEX IX_vocab_readings_vocab_id ON vocab_readings (vocab_id)');
  final i1.Index iXVocabReadingsReading = i1.Index('IX_vocab_readings_reading',
      'CREATE INDEX IX_vocab_readings_reading ON vocab_readings (reading)');
  final i1.Index iXVocabReadingsReadingRomaji = i1.Index(
      'IX_vocab_readings_reading_romaji',
      'CREATE INDEX IX_vocab_readings_reading_romaji ON vocab_readings (reading_romaji)');
  final i1.Index iXVocabDefinitionsVocabId = i1.Index(
      'IX_vocab_definitions_vocab_id',
      'CREATE INDEX IX_vocab_definitions_vocab_id ON vocab_definitions (vocab_id)');
  final i1.Index iXVocabDefinitionWordsWord = i1.Index(
      'IX_vocab_definition_words_word',
      'CREATE INDEX IX_vocab_definition_words_word ON vocab_definition_words (word)');
  late final Shape5 kanjis = Shape5(
      source: i0.VersionedTable(
        entityName: 'kanjis',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
          _column_31,
          _column_32,
          _column_33,
          _column_34,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 kanjiReadings = Shape6(
      source: i0.VersionedTable(
        entityName: 'kanji_readings',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_36,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_37,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 kanjiMeaningWords = Shape7(
      source: i0.VersionedTable(
        entityName: 'kanji_meaning_words',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_25,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXKanjisRadical = i1.Index('IX_kanjis_radical',
      'CREATE INDEX IX_kanjis_radical ON kanjis (radical)');
  final i1.Index iXKanjiReadingsKanjiId = i1.Index('IX_kanji_readings_kanji_id',
      'CREATE INDEX IX_kanji_readings_kanji_id ON kanji_readings (kanji_id)');
  final i1.Index iXKanjiReadingsReading = i1.Index('IX_kanji_readings_reading',
      'CREATE INDEX IX_kanji_readings_reading ON kanji_readings (reading)');
  final i1.Index iXKanjiReadingsReadingRomaji = i1.Index(
      'IX_kanji_readings_reading_romaji',
      'CREATE INDEX IX_kanji_readings_reading_romaji ON kanji_readings (reading_romaji)');
  final i1.Index iXKanjiMeaningWordsWord = i1.Index(
      'IX_kanji_meaning_words_word',
      'CREATE INDEX IX_kanji_meaning_words_word ON kanji_meaning_words (word)');
  late final Shape8 vocabNotes = Shape8(
      source: i0.VersionedTable(
        entityName: 'vocab_notes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 textAnalysisHistoryItems = Shape9(
      source: i0.VersionedTable(
        entityName: 'text_analysis_history_items',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_40,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 spacedRepetitionDatas = Shape10(
      source: i0.VersionedTable(
        entityName: 'spaced_repetition_datas',
        withoutRowId: true,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(vocab_id, kanji_id, front_type)',
        ],
        columns: [
          _column_41,
          _column_42,
          _column_43,
          _column_44,
          _column_45,
          _column_46,
          _column_47,
          _column_48,
          _column_49,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape11 searchHistoryItems = Shape11(
      source: i0.VersionedTable(
        entityName: 'search_history_items',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_50,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape12 radicals = Shape12(
      source: i0.VersionedTable(
        entityName: 'radicals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_27,
          _column_51,
          _column_30,
          _column_52,
          _column_5,
          _column_53,
          _column_54,
          _column_34,
          _column_55,
          _column_56,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index uKRadicalsRadical = i1.Index('UK_radicals_radical',
      'CREATE UNIQUE INDEX UK_radicals_radical ON radicals (radical)');
  late final Shape13 properNouns = Shape13(
      source: i0.VersionedTable(
        entityName: 'proper_nouns',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_57,
          _column_3,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_58,
          _column_59,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape14 properNounRomajiWords = Shape14(
      source: i0.VersionedTable(
        entityName: 'proper_noun_romaji_words',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_25,
          _column_60,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXProperNounsReading = i1.Index('IX_proper_nouns_reading',
      'CREATE INDEX IX_proper_nouns_reading ON proper_nouns (reading)');
  final i1.Index iXProperNounsReadingRomaji = i1.Index(
      'IX_proper_nouns_reading_romaji',
      'CREATE INDEX IX_proper_nouns_reading_romaji ON proper_nouns (reading_romaji)');
  final i1.Index iXProperNounRomajiWordsWord = i1.Index(
      'IX_proper_noun_romaji_words_word',
      'CREATE INDEX IX_proper_noun_romaji_words_word ON proper_noun_romaji_words (word)');
  late final Shape15 predefinedDictionaryLists = Shape15(
      source: i0.VersionedTable(
        entityName: 'predefined_dictionary_lists',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_61,
          _column_62,
          _column_26,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape16 myDictionaryLists = Shape16(
      source: i0.VersionedTable(
        entityName: 'my_dictionary_lists',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_61,
          _column_63,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape17 myDictionaryListItems = Shape17(
      source: i0.VersionedTable(
        entityName: 'my_dictionary_list_items',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(list_id, vocab_id, kanji_id)',
        ],
        columns: [
          _column_0,
          _column_64,
          _column_41,
          _column_42,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXMyDictionaryListItemsListId = i1.Index(
      'IX_my_dictionary_list_items_list_id',
      'CREATE INDEX IX_my_dictionary_list_items_list_id ON my_dictionary_list_items (list_id)');
  late final Shape8 kanjiNotes = Shape8(
      source: i0.VersionedTable(
        entityName: 'kanji_notes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape18 flashcardSets = Shape18(
      source: i0.VersionedTable(
        entityName: 'flashcard_sets',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_65,
          _column_66,
          _column_67,
          _column_68,
          _column_69,
          _column_70,
          _column_71,
          _column_72,
          _column_73,
          _column_74,
          _column_63,
          _column_75,
          _column_76,
          _column_77,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape19 flashcardSetReports = Shape19(
      source: i0.VersionedTable(
        entityName: 'flashcard_set_reports',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_78,
          _column_79,
          _column_80,
          _column_81,
          _column_82,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index uXFlashcardSetReportsFlashcardSetIdAndDate = i1.Index(
      'UX_flashcard_set_reports_flashcard_set_id_and_date',
      'CREATE UNIQUE INDEX UX_flashcard_set_reports_flashcard_set_id_and_date ON flashcard_set_reports (flashcard_set_id, date)');
  late final Shape20 dictionaryInfos = Shape20(
      source: i0.VersionedTable(
        entityName: 'dictionary_infos',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_83,
          _column_84,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index iXSpacedRepetitionDatasVocabId = i1.Index(
      'IX_spaced_repetition_datas_vocab_id',
      'CREATE INDEX IX_spaced_repetition_datas_vocab_id ON spaced_repetition_datas (vocab_id) WHERE vocab_id != 0');
  final i1.Index iXSpacedRepetitionDatasKanjiId = i1.Index(
      'IX_spaced_repetition_datas_kanji_id',
      'CREATE INDEX IX_spaced_repetition_datas_kanji_id ON spaced_repetition_datas (kanji_id) WHERE kanji_id != 0');
  final i1.Index iXProperNounsWriting = i1.Index('IX_proper_nouns_writing',
      'CREATE INDEX IX_proper_nouns_writing ON proper_nouns (writing) WHERE writing IS NOT NULL');
  final i1.Index iXProperNounsWritingSearchForm = i1.Index(
      'IX_proper_nouns_writing_search_form',
      'CREATE INDEX IX_proper_nouns_writing_search_form ON proper_nouns (writing_search_form) WHERE writing_search_form IS NOT NULL');
  final i1.Index iXProperNounsReadingSearchForm = i1.Index(
      'IX_proper_nouns_reading_search_form',
      'CREATE INDEX IX_proper_nouns_reading_search_form ON proper_nouns (reading_search_form) WHERE reading_search_form IS NOT NULL');
  final i1.Index iXProperNounsReadingRomajiSimplified = i1.Index(
      'IX_proper_nouns_reading_romaji_simplified',
      'CREATE INDEX IX_proper_nouns_reading_romaji_simplified ON proper_nouns (reading_romaji_simplified) WHERE reading_romaji_simplified IS NOT NULL');
  final i1.Index iXProperNounsRomaji = i1.Index('IX_proper_nouns_romaji',
      'CREATE INDEX IX_proper_nouns_romaji ON proper_nouns (romaji COLLATE NOCASE) WHERE romaji');
  final i1.Index iXMyDictionaryListItemsVocabId = i1.Index(
      'IX_my_dictionary_list_items_vocab_id',
      'CREATE INDEX IX_my_dictionary_list_items_vocab_id ON my_dictionary_list_items (vocab_id) WHERE vocab_id != 0');
  final i1.Index iXMyDictionaryListItemsKanjiId = i1.Index(
      'IX_my_dictionary_list_items_kanji_id',
      'CREATE INDEX IX_my_dictionary_list_items_kanji_id ON my_dictionary_list_items (kanji_id) WHERE kanji_id != 0');
  final i1.Index iXKanjiReadingsReadingSearchForm = i1.Index(
      'IX_kanji_readings_reading_search_form',
      'CREATE INDEX IX_kanji_readings_reading_search_form ON kanji_readings (reading_search_form) WHERE reading_search_form IS NOT NULL');
  final i1.Index iXKanjiReadingsReadingRomajiSimplified = i1.Index(
      'IX_kanji_readings_reading_romaji_simplified',
      'CREATE INDEX IX_kanji_readings_reading_romaji_simplified ON kanji_readings (reading_romaji_simplified) WHERE reading_romaji_simplified IS NOT NULL');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get vocabId =>
      columnsByName['vocab_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get writing =>
      columnsByName['writing']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get writingSearchForm =>
      columnsByName['writing_search_form']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get info =>
      columnsByName['info']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>('vocab_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('writing', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('writing_search_form', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('info', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get vocabId =>
      columnsByName['vocab_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get reading =>
      columnsByName['reading']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingSearchForm =>
      columnsByName['reading_search_form']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingRomaji =>
      columnsByName['reading_romaji']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingRomajiSimplified =>
      columnsByName['reading_romaji_simplified']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get associatedWritings =>
      columnsByName['associated_writings']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get info =>
      columnsByName['info']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get pitchAccents =>
      columnsByName['pitch_accents']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('reading', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('reading_search_form', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('reading_romaji', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('reading_romaji_simplified', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('associated_writings', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('pitch_accents', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get pos =>
      columnsByName['pos']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get common =>
      columnsByName['common']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get frequencyScore =>
      columnsByName['frequency_score']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('pos', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_12(String aliasedName) =>
    i1.GeneratedColumn<bool>('common', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('CHECK ("common" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('frequency_score', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get vocabId =>
      columnsByName['vocab_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get definition =>
      columnsByName['definition']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get additionalInfo =>
      columnsByName['additional_info']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get pos =>
      columnsByName['pos']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get appliesTo =>
      columnsByName['applies_to']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fields =>
      columnsByName['fields']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get miscInfo =>
      columnsByName['misc_info']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get dialects =>
      columnsByName['dialects']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get examples =>
      columnsByName['examples']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get languageSource =>
      columnsByName['language_source']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get waseieigo =>
      columnsByName['waseieigo']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get crossReferences =>
      columnsByName['cross_references']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get antonyms =>
      columnsByName['antonyms']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('definition', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('additional_info', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('applies_to', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('fields', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('misc_info', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('dialects', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('examples', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('language_source', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_22(String aliasedName) =>
    i1.GeneratedColumn<bool>('waseieigo', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("waseieigo" IN (0, 1))'));
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('cross_references', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('antonyms', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get word =>
      columnsByName['word']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get vocabId =>
      columnsByName['vocab_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>('word', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get kanji =>
      columnsByName['kanji']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get radical =>
      columnsByName['radical']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get components =>
      columnsByName['components']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get grade =>
      columnsByName['grade']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get strokeCount =>
      columnsByName['stroke_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get frequency =>
      columnsByName['frequency']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get jlpt =>
      columnsByName['jlpt']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get meaning =>
      columnsByName['meaning']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get strokes =>
      columnsByName['strokes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get compounds =>
      columnsByName['compounds']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_26(String aliasedName) =>
    i1.GeneratedColumn<String>('kanji', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>('radical', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>('components', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_29(String aliasedName) =>
    i1.GeneratedColumn<int>('grade', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_30(String aliasedName) =>
    i1.GeneratedColumn<int>('stroke_count', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_31(String aliasedName) =>
    i1.GeneratedColumn<int>('frequency', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_32(String aliasedName) =>
    i1.GeneratedColumn<int>('jlpt', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>('meaning', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_34(String aliasedName) =>
    i1.GeneratedColumn<String>('strokes', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>('compounds', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get kanjiId =>
      columnsByName['kanji_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get reading =>
      columnsByName['reading']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingSearchForm =>
      columnsByName['reading_search_form']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingRomaji =>
      columnsByName['reading_romaji']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingRomajiSimplified =>
      columnsByName['reading_romaji_simplified']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_36(String aliasedName) =>
    i1.GeneratedColumn<int>('kanji_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_37(String aliasedName) =>
    i1.GeneratedColumn<int>('type', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get word =>
      columnsByName['word']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get kanjiId =>
      columnsByName['kanji_id']! as i1.GeneratedColumn<int>;
}

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get note =>
      columnsByName['note']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_38(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_39(String aliasedName) =>
    i1.GeneratedColumn<String>('note', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get analysisText =>
      columnsByName['analysis_text']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_40(String aliasedName) =>
    i1.GeneratedColumn<String>('analysis_text', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape10 extends i0.VersionedTable {
  Shape10({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get vocabId =>
      columnsByName['vocab_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get kanjiId =>
      columnsByName['kanji_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get frontType =>
      columnsByName['front_type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get interval =>
      columnsByName['interval']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get repetitions =>
      columnsByName['repetitions']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get easeFactor =>
      columnsByName['ease_factor']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get dueDate =>
      columnsByName['due_date']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get totalAnswers =>
      columnsByName['total_answers']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get totalWrongAnswers =>
      columnsByName['total_wrong_answers']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_41(String aliasedName) => i1.GeneratedColumn<
        int>('vocab_id', aliasedName, false,
    type: i1.DriftSqlType.int,
    $customConstraints:
        'NOT NULL DEFAULT 0 CHECK( IIF(vocab_id = 0, 1, 0) + IIF(kanji_id = 0, 1, 0) = 1 )',
    defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<int> _column_42(String aliasedName) => i1.GeneratedColumn<
        int>('kanji_id', aliasedName, false,
    type: i1.DriftSqlType.int,
    $customConstraints:
        'NOT NULL DEFAULT 0 CHECK( IIF(vocab_id = 0, 1, 0) + IIF(kanji_id = 0, 1, 0) = 1 )',
    defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<int> _column_43(String aliasedName) =>
    i1.GeneratedColumn<int>('front_type', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_44(String aliasedName) =>
    i1.GeneratedColumn<int>('interval', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_45(String aliasedName) =>
    i1.GeneratedColumn<int>('repetitions', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<double> _column_46(String aliasedName) =>
    i1.GeneratedColumn<double>('ease_factor', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<int> _column_47(String aliasedName) =>
    i1.GeneratedColumn<int>('due_date', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_48(String aliasedName) =>
    i1.GeneratedColumn<int>('total_answers', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_49(String aliasedName) =>
    i1.GeneratedColumn<int>('total_wrong_answers', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape11 extends i0.VersionedTable {
  Shape11({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get searchText =>
      columnsByName['search_text']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_50(String aliasedName) =>
    i1.GeneratedColumn<String>('search_text', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape12 extends i0.VersionedTable {
  Shape12({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get radical =>
      columnsByName['radical']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get kangxiId =>
      columnsByName['kangxi_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get strokeCount =>
      columnsByName['stroke_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get meaning =>
      columnsByName['meaning']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get reading =>
      columnsByName['reading']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get position =>
      columnsByName['position']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get importance =>
      columnsByName['importance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get strokes =>
      columnsByName['strokes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get variants =>
      columnsByName['variants']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get variantOf =>
      columnsByName['variant_of']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_51(String aliasedName) =>
    i1.GeneratedColumn<int>('kangxi_id', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_52(String aliasedName) =>
    i1.GeneratedColumn<String>('meaning', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_53(String aliasedName) =>
    i1.GeneratedColumn<int>('position', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_54(String aliasedName) =>
    i1.GeneratedColumn<int>('importance', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_55(String aliasedName) =>
    i1.GeneratedColumn<String>('variants', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_56(String aliasedName) =>
    i1.GeneratedColumn<String>('variant_of', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape13 extends i0.VersionedTable {
  Shape13({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get writing =>
      columnsByName['writing']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get writingSearchForm =>
      columnsByName['writing_search_form']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get reading =>
      columnsByName['reading']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingSearchForm =>
      columnsByName['reading_search_form']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingRomaji =>
      columnsByName['reading_romaji']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get readingRomajiSimplified =>
      columnsByName['reading_romaji_simplified']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get romaji =>
      columnsByName['romaji']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get types =>
      columnsByName['types']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_57(String aliasedName) =>
    i1.GeneratedColumn<String>('writing', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_58(String aliasedName) =>
    i1.GeneratedColumn<String>('romaji', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_59(String aliasedName) =>
    i1.GeneratedColumn<String>('types', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape14 extends i0.VersionedTable {
  Shape14({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get word =>
      columnsByName['word']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get properNounId =>
      columnsByName['proper_noun_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_60(String aliasedName) =>
    i1.GeneratedColumn<int>('proper_noun_id', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape15 extends i0.VersionedTable {
  Shape15({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get vocab =>
      columnsByName['vocab']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get kanji =>
      columnsByName['kanji']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_61(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        check: () =>
            i2.ComparableExpr((i0.VersionedTable.col<String>('name')).length)
                .isBiggerThan(i2.Constant(0)),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_62(String aliasedName) =>
    i1.GeneratedColumn<String>('vocab', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape16 extends i0.VersionedTable {
  Shape16({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<DateTime> _column_63(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('timestamp', aliasedName, false,
        type: i1.DriftSqlType.dateTime,
        defaultValue: const CustomExpression(
            'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)'));

class Shape17 extends i0.VersionedTable {
  Shape17({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get listId =>
      columnsByName['list_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get vocabId =>
      columnsByName['vocab_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get kanjiId =>
      columnsByName['kanji_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_64(String aliasedName) =>
    i1.GeneratedColumn<int>('list_id', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape18 extends i0.VersionedTable {
  Shape18({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get usingSpacedRepetition =>
      columnsByName['using_spaced_repetition']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get frontType =>
      columnsByName['front_type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get vocabShowReading =>
      columnsByName['vocab_show_reading']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get vocabShowReadingIfRareKanji =>
      columnsByName['vocab_show_reading_if_rare_kanji']!
          as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get vocabShowAlternatives =>
      columnsByName['vocab_show_alternatives']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get vocabShowPitchAccent =>
      columnsByName['vocab_show_pitch_accent']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get kanjiShowReading =>
      columnsByName['kanji_show_reading']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get vocabShowPartsOfSpeech =>
      columnsByName['vocab_show_parts_of_speech']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get showNote =>
      columnsByName['show_note']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get predefinedDictionaryLists =>
      columnsByName['predefined_dictionary_lists']!
          as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get myDictionaryLists =>
      columnsByName['my_dictionary_lists']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get streak =>
      columnsByName['streak']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_65(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_66(String aliasedName) =>
    i1.GeneratedColumn<bool>('using_spaced_repetition', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("using_spaced_repetition" IN (0, 1))'),
        defaultValue: const CustomExpression('1'));
i1.GeneratedColumn<int> _column_67(String aliasedName) =>
    i1.GeneratedColumn<int>('front_type', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_68(String aliasedName) =>
    i1.GeneratedColumn<bool>('vocab_show_reading', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("vocab_show_reading" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_69(
        String aliasedName) =>
    i1.GeneratedColumn<bool>(
        'vocab_show_reading_if_rare_kanji', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("vocab_show_reading_if_rare_kanji" IN (0, 1))'),
        defaultValue: const CustomExpression('1'));
i1.GeneratedColumn<bool> _column_70(String aliasedName) =>
    i1.GeneratedColumn<bool>('vocab_show_alternatives', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("vocab_show_alternatives" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_71(String aliasedName) =>
    i1.GeneratedColumn<bool>('vocab_show_pitch_accent', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("vocab_show_pitch_accent" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_72(String aliasedName) =>
    i1.GeneratedColumn<bool>('kanji_show_reading', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("kanji_show_reading" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_73(String aliasedName) =>
    i1.GeneratedColumn<bool>('vocab_show_parts_of_speech', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("vocab_show_parts_of_speech" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_74(String aliasedName) =>
    i1.GeneratedColumn<bool>('show_note', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("show_note" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<String> _column_75(String aliasedName) =>
    i1.GeneratedColumn<String>(
        'predefined_dictionary_lists', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'[]\''));
i1.GeneratedColumn<String> _column_76(String aliasedName) =>
    i1.GeneratedColumn<String>('my_dictionary_lists', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'[]\''));
i1.GeneratedColumn<int> _column_77(String aliasedName) =>
    i1.GeneratedColumn<int>('streak', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));

class Shape19 extends i0.VersionedTable {
  Shape19({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get flashcardSetId =>
      columnsByName['flashcard_set_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get date =>
      columnsByName['date']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get dueFlashcardsCompleted =>
      columnsByName['due_flashcards_completed']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get dueFlashcardsGotWrong =>
      columnsByName['due_flashcards_got_wrong']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get newFlashcardsCompleted =>
      columnsByName['new_flashcards_completed']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_78(String aliasedName) =>
    i1.GeneratedColumn<int>('flashcard_set_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_79(String aliasedName) =>
    i1.GeneratedColumn<int>('date', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_80(String aliasedName) =>
    i1.GeneratedColumn<int>('due_flashcards_completed', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<int> _column_81(String aliasedName) =>
    i1.GeneratedColumn<int>('due_flashcards_got_wrong', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<int> _column_82(String aliasedName) =>
    i1.GeneratedColumn<int>('new_flashcards_completed', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));

class Shape20 extends i0.VersionedTable {
  Shape20({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get version =>
      columnsByName['version']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_83(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<int> _column_84(String aliasedName) =>
    i1.GeneratedColumn<int>('version', aliasedName, false,
        type: i1.DriftSqlType.int);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
